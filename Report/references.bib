% ARTICLES (FLUID DYNAMICS)

@article{QuickCheck,
 author = {Claessen, Koen and Hughes, John},
 title = {QuickCheck: a lightweight tool for random testing of Haskell programs},
 journal = {SIGPLAN Not.},
 issue_date = {Sept. 2000},
 volume = {35},
 number = {9},
 month = sep,
 year = {2000},
 issn = {0362-1340},
 pages = {268--279},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/357766.351266},
 doi = {10.1145/357766.351266},
 acmid = {351266},
 publisher = {ACM},
 address = {New York, NY, USA},
} 
@article{fingertree,
author = {HINZE,RALF and PATERSON,ROSS},
title = {Finger trees: a simple general-purpose data structure},
journal = {Journal of Functional Programming},
volume = {16},
issue = {02},
month = {3},
year = {2006},
issn = {1469-7653},
pages = {197--217},
numpages = {21},
doi = {10.1017/S0956796805005769},
URL = {http://journals.cambridge.org/article_S0956796805005769},
}

% BOOKS (FLUID DUNAMICS)

@inbook{Ranta2012,
	title		= "Implementing Programming Languages",
	author		= "Ranta, Aarne and Forsberg, Markus",
  chapter  = "Lexing and Parsing",
	pages       = "38--47",
	year		= "2012",
	publisher	= "College Publications",
	address		= "London",
	isbn		= "978-1-84890-064-6",
}

@book{Aho2006,
 author = {Aho, Alfred V. and Lam, Monica S. and Sethi, Ravi and Ullman, Jeffrey D.},
 title = {Compilers: Principles, Techniques, and Tools (2nd Edition)},
 year = {2006},
 isbn = {0321486811},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
}
@book{Hopcroft2000,
 author = {Hopcroft, John E. and Motwani, Rajeev and Rotwani and Ullman, Jeffrey D.},
 title = {Introduction to Automata Theory, Languages and Computability},
 year = {2000},
 isbn = {0201441241},
 edition = {2nd},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
} 
@book{sipser2006,
  title={Introduction To The Theory Of Computation},
  author={Sipser, M.},
  isbn={9780534950972},
  lccn={2006271030},
  series={Advanced Topics Series},
  url={http://books.google.se/books?id=SV2DQgAACAAJ},
  year={2006},
  publisher={Thomson Course Technology}
}
@book{sebesta2012,
  title={Concepts of Programming Languages [With Access Code]},
  author={Sebesta, R.W.},
  isbn={9780131395312},
  lccn={2011047510},
  series={Always learning},
  url={http://books.google.se/books?id=h9d0ygAACAAJ},
  year={2012},
  publisher={Pearson Education, Limited}
}
@book{Goodrich,
 author = {Goodrich, Michael T and Tamassia, Roberto},
 title = {Data Structures and Algorithms in Java, 4th Edition},
 year = {2005},
 isbn = {0471738840},
 publisher = {John Wiley \& Sons},
} 
@book{Kleinberg,
 author = {Kleinberg, Jon and Tardos, Eva},
 title = {Algorithm Design},
 year = {2005},
 isbn = {0321295358},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
} 
@book{Cormen,
 author = {Cormen, Thomas H. and Leiserson, Charles E. and Rivest, Ronald L. and Stein, Clifford},
 title = {Introduction to Algorithms, Third Edition},
 year = {2009},
 isbn = {0262033844, 9780262033848},
 edition = {3rd},
 publisher = {The MIT Press},
}
@book{Lin&Dyer,
 author = {Lin, Jimmy and Dyer, Chris},
 title = {Data-Intensive Text Processing with MapReduce},
 year = {2010},
 isbn = {1608453421, 9781608453429},
 publisher = {Morgan and Claypool Publishers},
} 

% OTHERS

 %editor = {van Leeuwen, Jan},
@inbook{Aho1990,
 author = {Aho, Alfred V.},
 chapter = {Algorithms for finding patterns in strings},
 title = {Handbook of theoretical computer science (vol. A)},
 year = {1990},
 isbn = {0-444-88071-2},
 pages = {255--300},
 numpages = {46},
 url = {http://dl.acm.org/citation.cfm?id=114872.114877},
 acmid = {114877},
 publisher = {MIT Press},
 address = {Cambridge, MA, USA},
}
@inproceedings{incrementalDef,
 author = {Sundaresh, R. S. and Hudak, Paul},
 title = {A theory of incremental computation and its application},
 booktitle = {Proceedings of the 18th ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
 series = {POPL '91},
 year = {1991},
 isbn = {0-89791-419-8},
 location = {Orlando, Florida, USA},
 pages = {1--13},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/99583.99587},
 doi = {10.1145/99583.99587},
 acmid = {99587},
 publisher = {ACM},
 address = {New York, NY, USA},
} 
@inproceedings{bernardy_efficient_2013,
	author = {Jean-Philippe Bernardy and Koen Claessen},
	title = {Efficient Divide-and-Conquer Parsing of Practical Context-Free Languages},
	year = {2013},
	booktitle = {Proceeding of the 18th {ACM} {SIGPLAN} international conference on Functional Programming},
	note = {To appear}
}
@inproceedings{bernardy_editor_2008,
	author = {Jean-Philippe Bernardy},
	address = {Victoria, {BC,} Canada},
	title = {Yi: an editor in {{Haskell}} for {{Haskell}}},
	isbn = {978-1-60558-064-7},
	shorttitle = {Yi},
	url = {http://portal.acm.org/citation.cfm?id=1411286.1411294},
	doi = {10.1145/1411286.1411294},
	abstract = {Yi is a text editor written in Haskell and extensible in Haskell. 
	We take advantage of Haskell's expressive power to define embedded {DSLs} that f
	orm the foundation of the editor. In turn, these {DSLs} provide a flexible mechanism t
	o create extended versions of the editor. Yi also provides some support for editing Haskell code.},
	booktitle = {Proceedings of the first {ACM} {SIGPLAN} symposium on Haskell},
	publisher = {{ACM}},
	year = {2008},
	keywords = {editor, functional programming},
	pages = {61--62}
}
@inproceedings{bernardy_lazy_2009,
	author = {Jean-Philippe Bernardy},
	address = {Edinburgh, Scotland},
	title = {Lazy functional incremental parsing},
	isbn = {978-1-60558-508-6},
	url = {http://portal.acm.org/citation.cfm?id=1596638.1596645},
	doi = {10.1145/1596638.1596645},
	abstract = {Structured documents are commonly edited using a free-form editor. 
	Even though every string is an acceptable input, it makes sense to maintain a structured 
	representation of the edited document. The structured representation has a number of 
	uses: structural navigation (and optional structural editing), structure highlighting, 
	etc. The construction of the structure must be done incrementally to be efficient: the 
	time to process an edit operation should be proportional to the size of the change, 
	and (ideally) independent of the total size of the document. We show that combining lazy 
	evaluation and caching of intermediate (partial) results enables incremental parsing.
	We build a complete incremental parsing library for interactive systems with support 
	for error-correction.},
	booktitle = {Proceedings of the 2nd {ACM} {SIGPLAN} symposium on Haskell},
	publisher = {{ACM}},
	year = {2009},
	keywords = {dynamic programming, editor, haskell, incremental computing, lazy evaluation, parsing, polish representation},
	pages = {49--60},
	see = {cites:wagner_efficient_1998;cites:ghezzi_incremental_1979}
}

@misc{blog,
author = {Piponi, Dan},
title = {Fast Incremental Regular Expression Matching With Monoids},
journal = {A Neighborhood of Infinity},
type = {Blog},
number = {January 24},
year = {2009},
howpublished = {blog.sigfpe.com/2009/01/fast-incremental-regular-expression.html} 
}
@manual{alex,
author = {Dornan, Chris and Jones, Isaac and Marlow, Simon},
title = {Alex User Guide},
organization  = {Haskell},
note = {www.haskell.org/alex/doc/html/index.html}
}


